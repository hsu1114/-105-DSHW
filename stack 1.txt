#include <stdio.h>
#include <stdlib.h>
#define MAX 10

int creates(int[]);         // 建立堆疊
int isEmpty(int);           // 堆疊已空
int stacktop(int[], int);   // 傳回頂端元素
int add(int[], int, int);   // 插入元素
int delete(int[], int);     // 刪除元素
void list(int[], int);      // 顯示所有內容

int main(void) {
	setvbuf(stdout, NULL, _IONBF, 0);
	setvbuf(stderr, NULL, _IONBF, 0);

    int stack[MAX];
    int top;
    int input, select;

    top = creates(stack);

    while(1) {
        printf("請輸入選項(-1結束)：\n");
        printf("(1)插入值至堆疊\n");
        printf("(2)顯示堆疊頂端\n");
        printf("(3)刪除頂端值\n");
        printf("(4)顯示所有內容\n");
        printf(">");
        scanf("%d", &select);

        if(select == -1)
            break;

        switch(select) {
            case 1:
                printf("輸入值：");
                scanf("%d", &input);
                top = add(stack, top, input);
                break;
            case 2:
                printf("頂端值：%d", stacktop(stack, top));
                break;
            case 3:
                top = delete(stack, top);
                break;
            case 4:
                list(stack, top);
                break;
            default:
                printf("\n選項錯誤！");
        }
    }

    printf("\n");

    return 0;
}

// 以下為堆疊操作的實作
int creates(int stack[]) {
    int i;

    for(i = 0; i < MAX; i++)
        stack[i] = 0;

    return -1;
}

int isEmpty(int top) {
    return (top == -1);
}

int stacktop(int stack[], int top) {
    return stack[top];
}

int add(int stack[], int top, int item) {
    int t = top;

    if(t >= MAX-1) {
        printf("\n堆疊已滿！");
        return t;
    }

    stack[++t] = item;

    return t;
}

int delete(int stack[], int top) {
    int t = top;

    if(isEmpty(t)) {
        printf("\n堆疊已空！");
        return t;
    }

    return --t;
}

void list(int stack[], int top) {
    int t = top;

    printf("\n堆疊內容：");
    while(!isEmpty(t)) {
        printf("%d ", stack[t]);
        t--;
    }
}
